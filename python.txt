Python笔记
1.len()—如果是str，则计算str的长度，如果是字节，则计算的是字节数，一个中文字符经过UTF-8编码后通常会占3个字节，而一个英文字符只占用一个字节。
2.bytes类型的数据用带b的前缀的单引号或者双引号来表示，尽量使用单引号。
3.互相转换：‘ABC’.encode(‘ascii’) 转换成以编码为指定的bytes
	   b’ABC’.decode(‘ascii’) 转换成str
	在操作中，我们经常需要用到str和bytes互转，为了避免乱码问题，应当始终坚持使用UTF-8对str和bytes进行转换。如果项目中有中文，那么在保存源代码的时候，必须保存为UTF-8编码格式，所以一般在文件开头写上：
	#!/usr/bin/env python3
	#_*_ coding:utf-8 _*_
	解释：第一行注释是告诉系统，这是一个Python可执行程序，windows系统下会hulue这个注释
	     第二行是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文可能乱码。
申明了UTF-8并不意味着可以正常运行，还必须保证文本编辑器正在使用UTF-8 without BOM编码：
Encoding - Encode in UTF-8 without BOM
4.如果在编码过程中，有类似字符串“你好，亲爱的xxx,你xx月话费为xx元”，xxx需要根据变量而变化，则通过%实现，%s表示字符串替换，%d表示整数替换，%f表示浮点数，%x表示十六进制整数，需要整数和浮点数需要补0的就添加数字，例如：%.2f — 3.14
	print('小明提升成绩的百分比为：%.2f'%c);
如果不确定类型，那么可以用%s，他可以把任何类型都转换为字符串
如果数据中有%是普通字符，需要转义，用%%表示一个%

5.list - 列表
例：Mylist = [‘a’,’b’,’c’];
print(list)
[‘a’,’b’,’c’]
len(Mylist) - 计算长度
得到 3
利用索引：Mylist[1] —> ‘b’
得到最后一个元素： 可以用len(Mylist) - 1,防止数据越界，也可以用Mylist[-1] - 得到‘c’，以此类推，倒数第二个len(Mylist) - 2
list是一个可变的有序表，所以可以追加元素到末尾 — Mylist.append(‘d’)
也可以追加到指定位置：Mylist.insert(1,’g’)
删除list末尾的元素pop():Mylist.pop() — 删除了最后一个
删除指定位置的元素pop(i)：Mylist.pop(1) — 删除索引为1的那个
把某个元素替换成别的元素，用直接赋值：Mylist[1] = x — 则第一位的数据更改为x
list里面的元素数据类型可以不同，比如：L = [‘apple’,123,True]
list中也可以包含另外一个list：L = [‘a’,’b’,[‘c’,’d’],f]，利用len()打印，数值为4，如果这个时候需要拿到‘c’,那么我们可以写成L[2][0],可以当做是二维数组来看
如果一个list中一个元素也没有，就是一个空的list，长度为0

6.tuple - 元组
元组是一种有序列表，和list非常相似，但是tuple一旦初始化就不能修改
例如：T = [‘a’,’b’,’c’]
现在T这个元组不能变，也没有append(),insert()等这些方法，其他获取元素的方法和list一致，但不能赋值成另外的元组
好处：不可变，所以代码更安全，在可能的情况下，尽量使用tuple代替list
注：类似于iOS中的可变和不可变的区别
注意：在定义tuple的时候，如果现在只有一个元素，比如：T = (1)
现在打印出来结果是1，但是，这么定义的不是tuple，而是数字1，因为()既可以表示tuple，也可以表示数学公式中的小括号，所以这种情况下，只有一个元素的tuple定义时应该写成T = (1,),加上一个逗号。
假设：
T = [‘A’,’B’,[‘a’,’b’]]
T[2][0] = ‘c’
T[2][1] = ‘d’
打印得到：[‘A’,’B’,[‘c’,’d’]]
在这个改变数字是因为里面是一个list，而list是可变的，修改的是list内部的元素，虽然list是tuple的一个元素。所以说，tuple的每一个元素，指向永远不变，，指向某一个对象，就不能改指另一个对象。


7.条件判断
if —->
age = 20
if age >= 18:
	print(‘your age is’,age)
	print(‘OK’)
上面代码，如果if语句得到的结果是True，那么就会执行下面的两行代码打印东西出来，也可以添加else代码，意识说如果if里面的为False，则去执行else里面的代码，else后面一定要写冒号
还可以用elif来进行多重判断，往下执行的时候会去判断elif的代码，如果某个elif成立，就执行，不成立往下执行，都不为True的时候，就去执行最后的else代码
if也可以简写：
if x：
	print(‘True’)
只要x是非零数字，非空字符串，非空list，就判断为True，否则False

8.input
input()执行以后，需要用户输入，当我们利用input()让用户输入数据以后，接着可以用if判断该输入是否为True或者该输入是否合法等等
input返回的是str类型，str类型不能和其他类型作比较，所以必须先转换为其他类型，Python提供int()函数来转换str为整数类型：
s = input(‘birthday:’)
birthday = int(s)

9.循环
计算1+2+3=4...等等很多数字的时候不可能直接写1+2+3+4...
为了计算的时候能够让某些重复运算很好的利用，我们需要循环语句
Python循环有两种：一种for..in循环，依次迭代出list或者tuple中的元素：
names = [‘a’,’b’,’c’]
for name in names:
print(name)
该段代码执行结果会依次打印出里面元素
for x in .. 循环就是把每个元素代入变量x，然后执行缩进块的语句
再比如计算1-10的和
sum = 0
for x in[1,2,3,4,5,6,7,8,9,10]
sum = sum + x
print(sum)
得到和

Python提供了一个range()函数，可以生成一个整数序列，再通过list()函数转换成list，比如range(5)生成的序列是从0开始小于5的整数：
list(range(5))
[0,1,2,3,4]

生成0 - 100的整数序列：
sum = 0
 for x in range(101):
    sum = sum + x
    print(sum)
结果5050

第二种是while循环，只要条件满足，就不停循环，条件不满足时退出循环，比如计算100以内所有奇数和
sum = 0
n = 99
while n > 0
sum = sum + n
n = n - 2
print(sum)


10.dict - 字典dictionary，其他语言叫map，使用键/值(key/value)存储
例如：Dic = {‘xyf’:’25’,‘zy’：‘23’}
Dic[‘zy’]
23
查询方法是根据key在内部计算出对应的存放地址，直接取出来
Dic[‘hm’] = 1 —>存进去
如果同一个key放入多次数值，前面放入放入会被后面放入的覆盖掉
如果key是不存在的，那么会报错，为了避免key不存在的报错，可以通过 in 判断key是否存在
‘xyz’ in Dic
False
还可以通过Dict提供的get方法，如果key存在，可以返回指定value，如果不存在返回None
Dic.get(‘zyf’)
返回None的时候不显示结果，意思是什么都不打印
Dic.get(‘zyf’,26)
26

删除一个key
Dic.pop(‘xyf’),对应的value也会从dict中删除掉

注意：dict内部存放的顺序和key放入的顺序是没有关系的
和list比较，dict有如下特点：
1.查找和插入的速度极快，不会随着key的增加而变慢
2.需要占用大量的内存，内存浪费多

而list相反：
1.查找的插入的时间随着元素的增加而增加
2.占用空间小，浪费内存很少

所以，dict是用空间来换取时间的一种方法
正确使用dict非常重要，需要牢记的第一条是dict的key必须是不可变对象

dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了，这个通过key计算位置的算法成为哈希算法（Hash）
要保证hash的正确性，作为key的对象就不能变，在Python中，字符串，整数等都是不可变的，因此可以放心作为key使用，而list是可变的，就不能作为key


11.set - 集合
set和dict类似，也是一组key的集合，但不存储value，由于key不能重复，所以在set中，没有重复的key
s = set([1,2,3])
{1,2,3}
传入的参数[1,2,3]是一个list，显示的1，2，3是说这个set内部拥有1，2，3这三个元素，显示顺序不代表set是有序的
重复元素在set中会自动被过滤
通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
s.add(4)
{1,2,3,4}
通过remove(key)删除元素
s.remove(2)
{1,3,4}
set可以看做数学意义上的无序和无重复组合元素的集合，因此，两个set可以做数学意义上的交集，并集等
>>> s1 = set([1,2,3])
>>> s2 = set([2,3,4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}
>>> 
set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部不能有重复元素。
理解：因为set内部不允许相同元素，所以说，如果放入可变对象，一个可变的对象怎么能拿来对比，所以是不允许可变对象的存在的。

对于不可变对象来说，调用对象自身的任意方法，也不会改变对象自身的内容，相反，这些对象会创建新的对象并返回，这样就保证了不可变对象本身永远是不可变的。


12.函数

抽象——函数就是最基本的一种代码抽象的方式，例如数学公式，某些数学符号代表一个公式

调用函数
python官网关于函数名称和参数参考：http://docs.python.org/3/library/functions.html#abs
也可以通过交互式命令行通过help(abs)查看函数的帮助信息
调用：
abs(100) —> 100
abs(-20) —> 20
abs(12.34) —> 12.34
调用函数的时候，如果传入的参数数量不对，会报TypeError错误，并且Python会明确告诉你：abs()有且仅有一个参数，但给出了两个：
>>> abs(1,2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: abs() takes exactly one argument (2 given)
>>> 
如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError错误，并且报错：str是错误的参数类型：
>>> abs('a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for abs(): 'str'
>>> 

而max函数和max()可以接收任意多个参数，并返回最大的那个：
>>> max(1,2)
2
>>> max(1,3,-5)
3
>>> 

数据类型转换：
Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据转换成整数：
>>> int('123')
123
>>> int(12.34)
12
>>> float('12.34')
12.34
>>> str(100)
'100'
>>> bool('')
False
>>> bool(1)
True
>>> 

定义函数：在Python中，定义一个函数要使用def语句，依次写出函数名，括号，括号中的参数和冒号：然后，在缩进块中编写函数体，函数的返回值使用reture语句。
自定义求绝对值的my_abs函数：
>>> def my_abs(x):
...     if x >= 0:
...          return x
...     else:
...          return -x
... 
>>> 
>>> my_abs(10)
10
>>> my_abs(-1)
1
>>> 
注意：在使用Python编写程序时一定要注意格式问题！！！！出现这句：expected an indented block 都是格式错误，缩进出现的问题，一定要注意。
调用：终端环境，建议重新打开一个终端，mac端：cd 存放py文件的目录，本机用的coding，abs.py文件存放于coding文件下，cd进来以后ls，然后more abs.py，会打开内部代码，此时输入python3启动Python解释器，输入from abs import my_abs，回车，看到>>>,此时开始调用函数my_abs(这里输入你需要的数字，比如9)，回车，得到结果9：
xuyafei:~ XYF$ cd /Users/XYF/Desktop/Python/coding 
xuyafei:coding XYF$ ls
a.py		abs.py		calc.py		learning.py
xuyafei:coding XYF$ more abs.py
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
xuyafei:coding XYF$ python3
Python 3.5.0 (v3.5.0:374f501f4567, Sep 12 2015, 11:00:19) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> from abs import my_abs
>>> my_abs(9)
9
>>> my_abs(-5)
5


空函数：
如果想定义一个什么事也不做的空函数，可以用pass语句。
def nop():
    pass
pass语句什么都不做，实际上pass可以用作占位符使用，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能够运行起来。
也可用在其他语句：
if age >= 18:
    pass
缺少了pass，代码运行就会有语法错误

参数检查：
调用函数的时候，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
>>> my_abs(1,2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: my_abs() takes 1 positional argument but 2 were given
>>> 
但如果参数类型不对，Python解释器就无法帮我们检查：my_abs和内置函数abs()差别：
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/XYF/Desktop/Python/coding/abs.py", line 2, in my_abs
    if x >= 0:
TypeError: unorderable types: str() >= int()
>>> abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for abs(): 'str'
>>> 
当传入不恰当的参数时，内置函数abs会检查出参数错误，而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样，所以这个函数不够完善。
修改my_abs函数定义，对参数类型做检查，只允许整数和浮点型参数，数据类型检查可以用内置函数isinstancce()实现：
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/XYF/Desktop/Python/coding/abs.py", line 2, in my_abs
    if x >= 0:
TypeError: unorderable types: str() >= int()
>>> abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for abs(): 'str'
>>> 

返回多个值：import math语句表示导入math包，并允许后续代码引用包里的sin.cos等函数
计算坐标：
import math
def move(x,y,step,angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.cos(angle)
    return nx,ny
 然后就可以同时获取返回值：
x,y = move(100,100,60,math.pi / 6)
print(x,y)
得到结果：151.96152422706632 70.0
结论：python对环境要求很严格，不建议使用xcode编写xcode，建议使用专用编辑器，因为在引入math包的时候无法导入导致出错耽误时间，谨记！
记住，Python返回值是一个tuple，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接受一个tuple，按位置赋给对应的值，所以，Python的函数返回值其实就是返回一个tuple，但写起来更方便。
小结：
定义函数时，需要确定函数名和参数个数；
如果有必要，可以先对参数的数据类型做检查；
函数体内部可以用return随时返回函数结果；
函数执行完毕也没有return语句时，自动return None；
函数可以同时返回多个值，但其实就是一个tuple。

